trigger:
  batch: true
  branches:
    include:
    - master
  paths:
    exclude:
    - README.md
    - .editorconfig
    - .gitignore

pr:
  branches:
    include:
    - master
  paths:
    exclude:
    - README.md
    - .editorconfig
    - .gitignore

name: $(Build.BuildId)

variables:
- name: VMImage
  value: 'windows-latest'
- name: BuildConfiguration
  value: Release
- group: 'Code Signing'

stages:
- stage: build
  displayName: Build NuGet Packages
  jobs:
  - job: buildJob
    displayName: Build Container Extensions
    pool:
      vmImage: $(VMImage)
      demands:
      - MSBuild
      - Xamarin.Android
      - JDK
      - AndroidSDK
    steps:
    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        useGlobalJson: true

    - task: NuGetToolInstaller@0
      displayName: Install Latest NuGet
      inputs:
        checkLatest: true

    - task: MSBuild@1
      displayName: Build Projects
      inputs:
        configuration: $(BuildConfiguration)
        msbuildArguments: '/p:DebugType=portable /p:JavaSdkDirectory="$(JAVA_HOME)" /restore'

    - task: DotNetCoreCLI@2
      displayName: DryIoc Extensions Tests
      inputs:
        command: test
        configuration: $(BuildConfiguration)
        projects: tests\Prism.DryIoc.*\*.csproj
        arguments: --logger trx --no-build --collect "Code Coverage"

    - task: DotNetCoreCLI@2
      displayName: Microsoft DI Extensions Tests
      inputs:
        command: test
        configuration: $(BuildConfiguration)
        projects: tests\Prism.Microsoft.DependencyInjection.*\*.csproj
        arguments: --logger trx --no-build --collect "Code Coverage"

    - task: DotNetCoreCLI@2
      displayName: Unity Extensions Tests
      inputs:
        command: test
        configuration: $(BuildConfiguration)
        projects: tests\Prism.Unity.*\*.csproj
        arguments: --logger trx --no-build --collect "Code Coverage"

    - task: DotNetCoreCLI@2
      displayName: Shiny Prism Tests
      inputs:
        command: test
        configuration: $(BuildConfiguration)
        projects: tests\Shiny.Prism.Tests\*.csproj
        arguments: --logger trx --no-build --collect "Code Coverage"

    - powershell: ./Sign-Packages.ps1
      workingDirectory: build
      displayName: Authenticode Sign Artifacts
      env:
        SignClientUser: $(SignClientUser)
        SignClientSecret: $(SignClientSecret)
        SignClientClientId: $(SignClientClientId)
        SignClientTenantId: $(SignClientTenantId)
        SignServiceResourceId: $(SignServiceResourceId)
      condition: and(succeeded(), eq(variables['system.pullrequest.isfork'], false))

    - task: PublishPipelineArtifact@1
      displayName: Publish Artifacts
      inputs:
        artifactName: NuGet
        targetPath: $(Build.ArtifactStagingDirectory)
    - task: PublishPipelineArtifact@1
      displayName: Publish Release Script
      inputs:
        artifactName: build
        targetPath: build/Process-Release.ps1

- stage: deploy
  displayName: Deploy NuGets
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  jobs:
  - deployment: MyGet
    displayName: MyGet.org
    environment: MyGet
    strategy:
      runOnce:
        deploy:
          steps:
          - task: NuGetCommand@2
            displayName: NuGet Push
            inputs:
              command: push
              packagesToPush: '$(Pipeline.Workspace)/**/*.nupkg'
              nuGetFeedType: external
              publishFeedCredentials: 'Prism.Plugins - MyGet'

- stage: deployNuGetOrg
  displayName: Deploy NuGets
  dependsOn: deploy
  jobs:
  - deployment: NuGet
    displayName: NuGet.org
    environment: NuGet
    condition: and(succeeded(), or(eq(variables['IS_PREVIEW'], true), eq(variables['IS_RELEASE'], true)))
    strategy:
      runOnce:
        deploy:
          steps:
          - powershell: ./Process-Release.ps1
            name: processName
            displayName: Process Artifacts for Release
            workingDirectory: $(Pipeline.Workspace)/build
            env:
              searchDirectory: $(Pipeline.Workspace)/NuGet

          - task: GithubRelease@0
            displayName: 'Create GitHub Release'
            inputs:
              gitHubConnection: GitHub
              title: '$(ReleaseDisplayName)'
              tagSource: manual
              tag: 'v$(VersionName)'
              isPreRelease: $(IS_PREVIEW)
              assets: '$(Pipeline.Workspace)/**/*.nupkg'
              addChangeLog: true
              isDraft: true

          - task: NuGetCommand@2
            displayName: NuGet Push
            inputs:
              command: push
              packagesToPush: '$(Pipeline.Workspace)/**/*.nupkg;!$(Pipeline.Workspace)/**/*.symbols.nupkg'
              nuGetFeedType: external
              publishFeedCredentials: 'NuGet'
